// Arr-time.cpp :	Тестовая программа, которая измеряет время выполнения отдельных участков кода в милисикундах.
//					В отдельных участках кода (Случай 1,2,3,4,5) реализовано создание двухмерных массивов различными способами.
//					Замер времени выполнения реализован в классе TimeElapsed.

#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

class TimeElapsed
{
	std::chrono::steady_clock::time_point startP, endP; //Точки начала и конца отсчета
	duration<double,std::ratio<1,1000>> diff; //переменная для подсчета разници. Параметр std::ratio<1,1> - секунды | std::ratio<1,1000> - милисекунды | std::ratio<1,1000000> - микросекунды | std::ratio<1,1000000000> - наносекунды.
	bool startInit, endInit; //флаги начала и конца измерения, нужны чтобы пользователь случайно не запросил время, не поставив флаги
public:
	TimeElapsed() { startInit = endInit = false; } //обнуляем флаги
	void start() {
		startP = std::chrono::high_resolution_clock::now(); //Запоминаем начальную точку отсчета
		startInit = true; //ставим флаг начала измерений в true
		endInit = false; //а флаг конца в false
	}
	void end() {
		endP = std::chrono::high_resolution_clock::now(); //Запоминаем конечную точку отсчета
		endInit = true; //выставляем второй флаг в true, чтобы иметь вохможность без проблем посчитать время
	}
	auto time() {
		if (!startInit) throw "No start point"; //кидаем исключение, если пользовательно просит посчитать время, не инициализировав начальную точку
		if (!endInit)   throw "No end point"; //тоже самое с конечной.

		diff = endP - startP; //считаем разницу
		return diff.count(); //возвращаем результат в милисекундах.
	}
	void clear() { startInit = endInit = false; } //сброс флагов
};


int main()
{
	setlocale(LC_ALL, "ru");
	TimeElapsed t;
	int size = 10000;

	//-----------		( Случай № 1)		-------------

	t.start();
	int** a = new int* [size];	// объявляем переменную типа указателя на указатели типа int.
								// присваиваем в неё адрес одномерного массива указателей.
	for (int i = 0; i < size; i++)
	{
		a[i] = new int[size];			// в одномерный массив указателей(индексы строк)
										// присваиваем адреса одномерных массивов(с индексами колонок)
		for (int j = 0; j < size; j++)
		{
			a[i][j] = 1;	// присваиваем значение каждому элементу псевдо-двумерного массива.
		}
	}
	t.end();
	cout << "Случай 1: " << t.time() << " ms" << endl;


	//-----------		( Случай № 2)		-------------

	t.start();
	int** b = new int* [size];	// Создаём двухмерный массив по аналогии с первым случаем.
								// Но инициализацию выполняем в отдельном цикле.
	for (int i = 0; i < size; i++)
	{
		b[i] = new int[size];
	}

	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			b[i][j] = 1;	// присваиваем значение каждому элементу псевдо-двумерного массива.
		}					// Во второе измерение назначаем индекс из внутреннего цикла.
	}						// В первое измерение назначаем индекс из внешнего цикла.
	t.end();
	cout << "Случай 2: " << t.time() << " ms" << endl;


	//-----------		( Случай № 3)		-------------

	t.start();
	int** c = new int* [size];	// Создаём двухмерный массив по аналогии с первым случаем.
								// Но инициализацию выполняем в отдельном цикле.
	for (int i = 0; i < size; i++)
	{
		c[i] = new int[size];
	}

	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			c[j][i] = 1;	// присваиваем значение каждому элементу псевдо-двумерного массива.
		}					// В первое измерение назначаем индекс из внутреннего цикла.
	}						// Во второе измерение назначаем индекс из внешнего цикла.
	t.end();
	cout << "Случай 3: " << t.time() << " ms" << endl;


	//-----------		( Случай № 4)		-------------

	t.start();
	int B;
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			B = b[i][j];	// извлекаем значение из каждого элемента псевдо-двумерного массива.
		}					// Во второе измерение назначаем индекс из внутреннего цикла.
	}						// В первое измерение назначаем индекс из внешнего цикла.
	t.end();
	cout << "Случай 4: " << t.time() << " ms" << endl;


	//-----------		( Случай № 5)		-------------

	t.start();
	int C;
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			C = c[j][i];	// извлекаем значение из каждого элемента псевдо-двумерного массива.
		}					// В первое измерение назначаем индекс из внутреннего цикла.
	}						// Во второе измерение назначаем индекс из внешнего цикла.
	t.end();
	cout << "Случай 5: " << t.time() << " ms" << endl;


	//-----------		( Удаляем выделенную память )		-------------

	t.start();
	for (int i = 0; i < size; i++)
	{
		delete[] a[i];
		delete[] b[i];
		delete[] c[i];
	}
	delete[] a;
	delete[] b;
	delete[] c;
	t.end();
	cout << "Удаляем : " << t.time() << " ms" << endl;
	
	return 0;
}

